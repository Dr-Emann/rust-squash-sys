/* automatically generated by rust-bindgen */

pub const SQUASH_VERSION_MAJOR: u32 = 0;
pub const SQUASH_VERSION_MINOR: u32 = 8;
pub const SQUASH_VERSION_REVISION: u32 = 0;
pub const SQUASH_VERSION_API: &'static [u8; 4usize] = b"0.8\0";
extern "C" {
    pub fn squash_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn squash_version_api() -> *const ::std::os::raw::c_char;
}
pub mod SquashStatus {
    pub type Type = i32;
    pub const SQUASH_OK: Type = 1;
    pub const SQUASH_PROCESSING: Type = 2;
    pub const SQUASH_END_OF_STREAM: Type = 3;
    pub const SQUASH_FAILED: Type = -1;
    pub const SQUASH_UNABLE_TO_LOAD: Type = -2;
    pub const SQUASH_BAD_PARAM: Type = -3;
    pub const SQUASH_BAD_VALUE: Type = -4;
    pub const SQUASH_MEMORY: Type = -5;
    pub const SQUASH_BUFFER_FULL: Type = -6;
    pub const SQUASH_BUFFER_EMPTY: Type = -7;
    pub const SQUASH_STATE: Type = -8;
    pub const SQUASH_INVALID_OPERATION: Type = -9;
    pub const SQUASH_NOT_FOUND: Type = -10;
    pub const SQUASH_INVALID_BUFFER: Type = -11;
    pub const SQUASH_IO: Type = -12;
    pub const SQUASH_RANGE: Type = -13;
}
extern "C" {
    pub fn squash_status_to_string(status: SquashStatus::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_error(status: SquashStatus::Type) -> SquashStatus::Type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashCodec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashPlugin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashFile {
    _unused: [u8; 0],
}
extern "C" {
    pub fn squash_object_ref(obj: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_object_unref(obj: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_object_get_ref_count(obj: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn squash_object_ref_sink(obj: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
pub type SquashDestroyNotify =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashObject {
    pub ref_count: ::std::os::raw::c_uint,
    pub is_floating: ::std::os::raw::c_int,
    pub destroy_notify: SquashDestroyNotify,
}
#[test]
fn bindgen_test_layout_SquashObject() {
    assert_eq!(
        ::std::mem::size_of::<SquashObject>(),
        16usize,
        concat!("Size of: ", stringify!(SquashObject))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashObject>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashObject>())).ref_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashObject),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashObject>())).is_floating as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashObject),
            "::",
            stringify!(is_floating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashObject>())).destroy_notify as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashObject),
            "::",
            stringify!(destroy_notify)
        )
    );
}
extern "C" {
    pub fn squash_object_init(
        obj: *mut ::std::os::raw::c_void,
        is_floating: bool,
        destroy_notify: SquashDestroyNotify,
    );
}
extern "C" {
    pub fn squash_object_destroy(obj: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptions {
    pub base_object: SquashObject,
    pub codec: *mut SquashCodec,
    pub values: *mut SquashOptionValue,
}
#[test]
fn bindgen_test_layout_SquashOptions() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptions>(),
        32usize,
        concat!("Size of: ", stringify!(SquashOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptions>())).base_object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptions),
            "::",
            stringify!(base_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptions>())).codec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptions),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptions>())).values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptions),
            "::",
            stringify!(values)
        )
    );
}
pub mod SquashOptionType {
    pub type Type = u32;
    pub const SQUASH_OPTION_TYPE_NONE: Type = 0;
    pub const SQUASH_OPTION_TYPE_BOOL: Type = 1;
    pub const SQUASH_OPTION_TYPE_STRING: Type = 2;
    pub const SQUASH_OPTION_TYPE_INT: Type = 3;
    pub const SQUASH_OPTION_TYPE_SIZE: Type = 4;
    pub const SQUASH_OPTION_TYPE_ENUM_STRING: Type = 18;
    pub const SQUASH_OPTION_TYPE_ENUM_INT: Type = 19;
    pub const SQUASH_OPTION_TYPE_RANGE_INT: Type = 35;
    pub const SQUASH_OPTION_TYPE_RANGE_SIZE: Type = 36;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptionInfoEnumStringMap {
    pub name: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SquashOptionInfoEnumStringMap() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfoEnumStringMap>(),
        16usize,
        concat!("Size of: ", stringify!(SquashOptionInfoEnumStringMap))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfoEnumStringMap>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfoEnumStringMap))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoEnumStringMap>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoEnumStringMap),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoEnumStringMap>())).value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoEnumStringMap),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptionInfoEnumString {
    pub values: *const SquashOptionInfoEnumStringMap,
}
#[test]
fn bindgen_test_layout_SquashOptionInfoEnumString() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfoEnumString>(),
        8usize,
        concat!("Size of: ", stringify!(SquashOptionInfoEnumString))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfoEnumString>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfoEnumString))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoEnumString>())).values as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoEnumString),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptionInfoEnumInt {
    pub values_length: usize,
    pub values: *const ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SquashOptionInfoEnumInt() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfoEnumInt>(),
        16usize,
        concat!("Size of: ", stringify!(SquashOptionInfoEnumInt))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfoEnumInt>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfoEnumInt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoEnumInt>())).values_length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoEnumInt),
            "::",
            stringify!(values_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfoEnumInt>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoEnumInt),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptionInfoRangeInt {
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub modulus: ::std::os::raw::c_int,
    pub allow_zero: bool,
}
#[test]
fn bindgen_test_layout_SquashOptionInfoRangeInt() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfoRangeInt>(),
        16usize,
        concat!("Size of: ", stringify!(SquashOptionInfoRangeInt))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfoRangeInt>(),
        4usize,
        concat!("Alignment of ", stringify!(SquashOptionInfoRangeInt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfoRangeInt>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeInt),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfoRangeInt>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeInt),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoRangeInt>())).modulus as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeInt),
            "::",
            stringify!(modulus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoRangeInt>())).allow_zero as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeInt),
            "::",
            stringify!(allow_zero)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashOptionInfoRangeSize {
    pub min: usize,
    pub max: usize,
    pub modulus: usize,
    pub allow_zero: bool,
}
#[test]
fn bindgen_test_layout_SquashOptionInfoRangeSize() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfoRangeSize>(),
        32usize,
        concat!("Size of: ", stringify!(SquashOptionInfoRangeSize))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfoRangeSize>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfoRangeSize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfoRangeSize>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeSize),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfoRangeSize>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeSize),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoRangeSize>())).modulus as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeSize),
            "::",
            stringify!(modulus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfoRangeSize>())).allow_zero as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfoRangeSize),
            "::",
            stringify!(allow_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SquashOptionValue {
    pub string_value: *mut ::std::os::raw::c_char,
    pub int_value: ::std::os::raw::c_int,
    pub bool_value: bool,
    pub size_value: usize,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_SquashOptionValue() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionValue>(),
        8usize,
        concat!("Size of: ", stringify!(SquashOptionValue))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionValue>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionValue>())).string_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionValue),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionValue>())).int_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionValue),
            "::",
            stringify!(int_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionValue>())).bool_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionValue),
            "::",
            stringify!(bool_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionValue>())).size_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionValue),
            "::",
            stringify!(size_value)
        )
    );
}
impl ::std::fmt::Debug for SquashOptionValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "SquashOptionValue {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SquashOptionInfo {
    pub name: *const ::std::os::raw::c_char,
    pub type_: SquashOptionType::Type,
    pub info: SquashOptionInfo__bindgen_ty_1,
    pub default_value: SquashOptionValue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SquashOptionInfo__bindgen_ty_1 {
    pub enum_string: SquashOptionInfoEnumString,
    pub enum_int: SquashOptionInfoEnumInt,
    pub range_int: SquashOptionInfoRangeInt,
    pub range_size: SquashOptionInfoRangeSize,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_SquashOptionInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfo__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(SquashOptionInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfo__bindgen_ty_1>())).enum_string as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo__bindgen_ty_1),
            "::",
            stringify!(enum_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfo__bindgen_ty_1>())).enum_int as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo__bindgen_ty_1),
            "::",
            stringify!(enum_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfo__bindgen_ty_1>())).range_int as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo__bindgen_ty_1),
            "::",
            stringify!(range_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashOptionInfo__bindgen_ty_1>())).range_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo__bindgen_ty_1),
            "::",
            stringify!(range_size)
        )
    );
}
impl ::std::fmt::Debug for SquashOptionInfo__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "SquashOptionInfo__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_SquashOptionInfo() {
    assert_eq!(
        ::std::mem::size_of::<SquashOptionInfo>(),
        56usize,
        concat!("Size of: ", stringify!(SquashOptionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashOptionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashOptionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfo>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfo>())).info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashOptionInfo>())).default_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashOptionInfo),
            "::",
            stringify!(default_value)
        )
    );
}
impl ::std::fmt::Debug for SquashOptionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "SquashOptionInfo {{ name: {:?}, type: {:?}, info: {:?}, default_value: {:?} }}",
            self.name, self.type_, self.info, self.default_value
        )
    }
}
extern "C" {
    pub fn squash_options_new(codec: *mut SquashCodec, ...) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_newv(codec: *mut SquashCodec, options: va_list) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_newa(
        codec: *mut SquashCodec,
        keys: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
    ) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_get_string(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_options_get_bool(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn squash_options_get_int(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn squash_options_get_size(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn squash_options_get_string_at(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        index: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_options_get_bool_at(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        index: usize,
    ) -> bool;
}
extern "C" {
    pub fn squash_options_get_int_at(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn squash_options_get_size_at(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        index: usize,
    ) -> usize;
}
extern "C" {
    pub fn squash_options_set_string(
        options: *mut SquashOptions,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_bool(
        options: *mut SquashOptions,
        key: *const ::std::os::raw::c_char,
        value: bool,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_int(
        options: *mut SquashOptions,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_size(
        options: *mut SquashOptions,
        key: *const ::std::os::raw::c_char,
        value: usize,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_string_at(
        options: *mut SquashOptions,
        index: usize,
        value: *const ::std::os::raw::c_char,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_bool_at(
        options: *mut SquashOptions,
        index: usize,
        value: bool,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_int_at(
        options: *mut SquashOptions,
        index: usize,
        value: ::std::os::raw::c_int,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_set_size_at(
        options: *mut SquashOptions,
        index: usize,
        value: usize,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parse(options: *mut SquashOptions, ...) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parsev(
        options: *mut SquashOptions,
        options_list: va_list,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parsea(
        options: *mut SquashOptions,
        keys: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parse_option(
        options: *mut SquashOptions,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_init(
        options: *mut ::std::os::raw::c_void,
        codec: *mut SquashCodec,
        destroy_notify: SquashDestroyNotify,
    );
}
extern "C" {
    pub fn squash_options_destroy(options: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_options_neww(codec: *mut SquashCodec, ...) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_newvw(codec: *mut SquashCodec, options: va_list) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_newaw(
        codec: *mut SquashCodec,
        keys: *const *const wchar_t,
        values: *const *const wchar_t,
    ) -> *mut SquashOptions;
}
extern "C" {
    pub fn squash_options_get_stringw(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn squash_options_get_boolw(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const wchar_t,
    ) -> bool;
}
extern "C" {
    pub fn squash_options_get_intw(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn squash_options_get_sizew(
        options: *mut SquashOptions,
        codec: *mut SquashCodec,
        key: *const wchar_t,
    ) -> usize;
}
extern "C" {
    pub fn squash_options_parsew(options: *mut SquashOptions, ...) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parsevw(
        options: *mut SquashOptions,
        options_list: va_list,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parseaw(
        options: *mut SquashOptions,
        keys: *const *const wchar_t,
        values: *const *const wchar_t,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_options_parse_optionw(
        options: *mut SquashOptions,
        key: *const wchar_t,
        value: *const wchar_t,
    ) -> SquashStatus::Type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashStreamPrivate {
    _unused: [u8; 0],
}
pub mod SquashStreamType {
    pub type Type = u32;
    pub const SQUASH_STREAM_COMPRESS: Type = 1;
    pub const SQUASH_STREAM_DECOMPRESS: Type = 2;
}
pub mod SquashStreamState {
    pub type Type = u32;
    pub const SQUASH_STREAM_STATE_IDLE: Type = 0;
    pub const SQUASH_STREAM_STATE_RUNNING: Type = 1;
    pub const SQUASH_STREAM_STATE_FLUSHING: Type = 2;
    pub const SQUASH_STREAM_STATE_FINISHING: Type = 3;
    pub const SQUASH_STREAM_STATE_FINISHED: Type = 4;
}
pub mod SquashOperation {
    pub type Type = u32;
    pub const SQUASH_OPERATION_PROCESS: Type = 1;
    pub const SQUASH_OPERATION_FLUSH: Type = 2;
    pub const SQUASH_OPERATION_FINISH: Type = 3;
    pub const SQUASH_OPERATION_TERMINATE: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashStream {
    pub base_object: SquashObject,
    pub priv_: *mut SquashStreamPrivate,
    pub next_in: *const u8,
    pub avail_in: usize,
    pub total_in: usize,
    pub next_out: *mut u8,
    pub avail_out: usize,
    pub total_out: usize,
    pub codec: *mut SquashCodec,
    pub options: *mut SquashOptions,
    pub stream_type: SquashStreamType::Type,
    pub state: SquashStreamState::Type,
    pub user_data: *mut ::std::os::raw::c_void,
    pub destroy_user_data: SquashDestroyNotify,
}
#[test]
fn bindgen_test_layout_SquashStream() {
    assert_eq!(
        ::std::mem::size_of::<SquashStream>(),
        112usize,
        concat!("Size of: ", stringify!(SquashStream))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashStream>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashStream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).base_object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(base_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).priv_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).next_in as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(next_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).avail_in as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(avail_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).total_in as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(total_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).next_out as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(next_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).avail_out as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(avail_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).total_out as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(total_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).codec as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).options as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).stream_type as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).state as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).user_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashStream>())).destroy_user_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashStream),
            "::",
            stringify!(destroy_user_data)
        )
    );
}
extern "C" {
    pub fn squash_stream_new(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        ...
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_stream_newv(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        options: va_list,
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_stream_newa(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        keys: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_stream_new_with_options(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        options: *mut SquashOptions,
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_stream_process(stream: *mut SquashStream) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_stream_flush(stream: *mut SquashStream) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_stream_finish(stream: *mut SquashStream) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_stream_init(
        stream: *mut ::std::os::raw::c_void,
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        options: *mut SquashOptions,
        destroy_notify: SquashDestroyNotify,
    );
}
extern "C" {
    pub fn squash_stream_destroy(stream: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_file_open(
        codec: *mut SquashCodec,
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        ...
    ) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_open_with_options(
        codec: *mut SquashCodec,
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        options: *mut SquashOptions,
    ) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_steal(codec: *mut SquashCodec, fp: *mut FILE, ...) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_steal_with_options(
        codec: *mut SquashCodec,
        fp: *mut FILE,
        options: *mut SquashOptions,
    ) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_read(
        file: *mut SquashFile,
        decompressed_size: *mut usize,
        decompressed: *mut u8,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_write(
        file: *mut SquashFile,
        uncompressed_size: usize,
        uncompressed: *const u8,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_printf(
        file: *mut SquashFile,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_vprintf(
        file: *mut SquashFile,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_flush(file: *mut SquashFile) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_close(file: *mut SquashFile) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_free(file: *mut SquashFile, fp: *mut *mut FILE) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_eof(file: *mut SquashFile) -> bool;
}
extern "C" {
    pub fn squash_file_error(file: *mut SquashFile) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_lock(file: *mut SquashFile);
}
extern "C" {
    pub fn squash_file_unlock(file: *mut SquashFile);
}
extern "C" {
    pub fn squash_file_read_unlocked(
        file: *mut SquashFile,
        decompressed_size: *mut usize,
        decompressed: *mut u8,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_write_unlocked(
        file: *mut SquashFile,
        uncompressed_size: usize,
        uncompressed: *const u8,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_flush_unlocked(file: *mut SquashFile) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_wopen(
        codec: *mut SquashCodec,
        filename: *const wchar_t,
        mode: *const wchar_t,
        ...
    ) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_wopen_with_options(
        codec: *mut SquashCodec,
        filename: *const wchar_t,
        mode: *const wchar_t,
        options: *mut SquashOptions,
    ) -> *mut SquashFile;
}
extern "C" {
    pub fn squash_file_wprintf(
        file: *mut SquashFile,
        format: *const wchar_t,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_file_vwprintf(
        file: *mut SquashFile,
        format: *const wchar_t,
        ap: va_list,
    ) -> SquashStatus::Type;
}
impl SquashLicense {
    pub const SQUASH_LICENSE_UNKNOWN: SquashLicense = SquashLicense(0);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_PERMISSIVE: SquashLicense = SquashLicense(16777216);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_STRONG_COPYLEFT: SquashLicense = SquashLicense(33554432);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_WEAK_COPYLEFT: SquashLicense = SquashLicense(67108864);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_PROPRIETARY: SquashLicense = SquashLicense(134217728);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_TYPE_MASK: SquashLicense = SquashLicense(-16777216);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_COPYLEFT_INCOMPATIBLE: SquashLicense = SquashLicense(65536);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_OR_GREATER: SquashLicense = SquashLicense(131072);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_FLAGS_MASK: SquashLicense = SquashLicense(16711680);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_PUBLIC_DOMAIN: SquashLicense = SquashLicense(16777217);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_BSD2: SquashLicense = SquashLicense(16777218);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_BSD3: SquashLicense = SquashLicense(16777219);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_BSD4: SquashLicense = SquashLicense(16842756);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_MIT: SquashLicense = SquashLicense(16777221);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_ZLIB: SquashLicense = SquashLicense(16777222);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_WTFPL: SquashLicense = SquashLicense(16777223);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_X11: SquashLicense = SquashLicense(16777224);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_APACHE: SquashLicense = SquashLicense(16777225);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_APACHE2: SquashLicense = SquashLicense(16777226);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_CDDL: SquashLicense = SquashLicense(16842763);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_MSPL: SquashLicense = SquashLicense(16842764);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_ISC: SquashLicense = SquashLicense(16777229);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_MPL: SquashLicense = SquashLicense(67108865);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_LGPL2P1: SquashLicense = SquashLicense(67108866);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_LGPL2P1_PLUS: SquashLicense = SquashLicense(67239938);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_LGPL3: SquashLicense = SquashLicense(67108867);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_LGPL3_PLUS: SquashLicense = SquashLicense(67239939);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL1: SquashLicense = SquashLicense(33554433);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL1_PLUS: SquashLicense = SquashLicense(33685505);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL2: SquashLicense = SquashLicense(33554434);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL2_PLUS: SquashLicense = SquashLicense(33685506);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL3: SquashLicense = SquashLicense(33554435);
}
impl SquashLicense {
    pub const SQUASH_LICENSE_GPL3_PLUS: SquashLicense = SquashLicense(33685507);
}
impl ::std::ops::BitOr<SquashLicense> for SquashLicense {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        SquashLicense(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for SquashLicense {
    #[inline]
    fn bitor_assign(&mut self, rhs: SquashLicense) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<SquashLicense> for SquashLicense {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        SquashLicense(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for SquashLicense {
    #[inline]
    fn bitand_assign(&mut self, rhs: SquashLicense) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct SquashLicense(pub i32);
extern "C" {
    pub fn squash_license_from_string(license: *const ::std::os::raw::c_char) -> SquashLicense;
}
extern "C" {
    pub fn squash_license_to_string(license: SquashLicense) -> *const ::std::os::raw::c_char;
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_CAN_FLUSH: SquashCodecInfo = SquashCodecInfo(1);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_DECOMPRESS_UNSAFE: SquashCodecInfo = SquashCodecInfo(2);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_WRAP_SIZE: SquashCodecInfo = SquashCodecInfo(4);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_AUTO_MASK: SquashCodecInfo = SquashCodecInfo(16711680);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_VALID: SquashCodecInfo = SquashCodecInfo(65536);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_KNOWS_UNCOMPRESSED_SIZE: SquashCodecInfo = SquashCodecInfo(131072);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_NATIVE_STREAMING: SquashCodecInfo = SquashCodecInfo(262144);
}
impl SquashCodecInfo {
    pub const SQUASH_CODEC_INFO_MASK: SquashCodecInfo = SquashCodecInfo(16777215);
}
impl ::std::ops::BitOr<SquashCodecInfo> for SquashCodecInfo {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        SquashCodecInfo(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for SquashCodecInfo {
    #[inline]
    fn bitor_assign(&mut self, rhs: SquashCodecInfo) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<SquashCodecInfo> for SquashCodecInfo {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        SquashCodecInfo(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for SquashCodecInfo {
    #[inline]
    fn bitand_assign(&mut self, rhs: SquashCodecInfo) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct SquashCodecInfo(pub u32);
pub type SquashReadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        data_size: *mut usize,
        data: *mut u8,
        user_data: *mut ::std::os::raw::c_void,
    ) -> SquashStatus::Type,
>;
pub type SquashWriteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        data_size: *mut usize,
        data: *const u8,
        user_data: *mut ::std::os::raw::c_void,
    ) -> SquashStatus::Type,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashCodecImpl {
    pub info: SquashCodecInfo,
    pub options: *const SquashOptionInfo,
    pub create_stream: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            stream_type: SquashStreamType::Type,
            options: *mut SquashOptions,
        ) -> *mut SquashStream,
    >,
    pub process_stream: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut SquashStream,
            operation: SquashOperation::Type,
        ) -> SquashStatus::Type,
    >,
    pub splice: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            options: *mut SquashOptions,
            stream_type: SquashStreamType::Type,
            read_cb: SquashReadFunc,
            write_cb: SquashWriteFunc,
            user_data: *mut ::std::os::raw::c_void,
        ) -> SquashStatus::Type,
    >,
    pub decompress_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            decompressed_size: *mut usize,
            decompressed: *mut u8,
            compressed_size: usize,
            compressed: *const u8,
            options: *mut SquashOptions,
        ) -> SquashStatus::Type,
    >,
    pub compress_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            compressed_size: *mut usize,
            compressed: *mut u8,
            uncompressed_size: usize,
            uncompressed: *const u8,
            options: *mut SquashOptions,
        ) -> SquashStatus::Type,
    >,
    pub compress_buffer_unsafe: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            compressed_size: *mut usize,
            compressed: *mut u8,
            uncompressed_size: usize,
            uncompressed: *const u8,
            options: *mut SquashOptions,
        ) -> SquashStatus::Type,
    >,
    pub get_uncompressed_size: ::std::option::Option<
        unsafe extern "C" fn(
            codec: *mut SquashCodec,
            compressed_size: usize,
            compressed: *const u8,
        ) -> usize,
    >,
    pub get_max_compressed_size: ::std::option::Option<
        unsafe extern "C" fn(codec: *mut SquashCodec, uncompressed_size: usize) -> usize,
    >,
    pub _reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved3: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved4: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved5: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved6: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved7: ::std::option::Option<unsafe extern "C" fn()>,
    pub _reserved8: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_SquashCodecImpl() {
    assert_eq!(
        ::std::mem::size_of::<SquashCodecImpl>(),
        144usize,
        concat!("Size of: ", stringify!(SquashCodecImpl))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashCodecImpl>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashCodecImpl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).create_stream as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(create_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).process_stream as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(process_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).splice as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(splice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashCodecImpl>())).decompress_buffer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(decompress_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>())).compress_buffer as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(compress_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashCodecImpl>())).compress_buffer_unsafe as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(compress_buffer_unsafe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashCodecImpl>())).get_uncompressed_size as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(get_uncompressed_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SquashCodecImpl>())).get_max_compressed_size as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(get_max_compressed_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved1 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved3 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved4 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved5 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved6 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved7 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashCodecImpl>()))._reserved8 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashCodecImpl),
            "::",
            stringify!(_reserved8)
        )
    );
}
pub type SquashCodecForeachFunc = ::std::option::Option<
    unsafe extern "C" fn(codec: *mut SquashCodec, data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn squash_codec_init(codec: *mut SquashCodec) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_codec_get_name(codec: *mut SquashCodec) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_codec_get_priority(codec: *mut SquashCodec) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn squash_codec_get_plugin(codec: *mut SquashCodec) -> *mut SquashPlugin;
}
extern "C" {
    pub fn squash_codec_get_context(codec: *mut SquashCodec) -> *mut SquashContext;
}
extern "C" {
    pub fn squash_codec_get_extension(codec: *mut SquashCodec) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_codec_get_uncompressed_size(
        codec: *mut SquashCodec,
        compressed_size: usize,
        compressed: *const u8,
    ) -> usize;
}
extern "C" {
    pub fn squash_codec_get_max_compressed_size(
        codec: *mut SquashCodec,
        uncompressed_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn squash_codec_create_stream(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        ...
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_codec_create_stream_with_options(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        options: *mut SquashOptions,
    ) -> *mut SquashStream;
}
extern "C" {
    pub fn squash_codec_compress(
        codec: *mut SquashCodec,
        compressed_size: *mut usize,
        compressed: *mut u8,
        uncompressed_size: usize,
        uncompressed: *const u8,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_codec_compress_with_options(
        codec: *mut SquashCodec,
        compressed_size: *mut usize,
        compressed: *mut u8,
        uncompressed_size: usize,
        uncompressed: *const u8,
        options: *mut SquashOptions,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_codec_decompress(
        codec: *mut SquashCodec,
        decompressed_size: *mut usize,
        decompressed: *mut u8,
        compressed_size: usize,
        compressed: *const u8,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_codec_decompress_with_options(
        codec: *mut SquashCodec,
        decompressed_size: *mut usize,
        decompressed: *mut u8,
        compressed_size: usize,
        compressed: *const u8,
        options: *mut SquashOptions,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_codec_get_info(codec: *mut SquashCodec) -> SquashCodecInfo;
}
extern "C" {
    pub fn squash_codec_get_option_info(codec: *mut SquashCodec) -> *const SquashOptionInfo;
}
extern "C" {
    pub fn squash_splice(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        fp_out: *mut FILE,
        fp_in: *mut FILE,
        size: usize,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_splice_with_options(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        fp_out: *mut FILE,
        fp_in: *mut FILE,
        size: usize,
        options: *mut SquashOptions,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_splice_custom(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        write_cb: SquashWriteFunc,
        read_cb: SquashReadFunc,
        user_data: *mut ::std::os::raw::c_void,
        size: usize,
        ...
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_splice_custom_with_options(
        codec: *mut SquashCodec,
        stream_type: SquashStreamType::Type,
        write_cb: SquashWriteFunc,
        read_cb: SquashReadFunc,
        user_data: *mut ::std::os::raw::c_void,
        size: usize,
        options: *mut SquashOptions,
    ) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_plugin_init(plugin: *mut SquashPlugin) -> SquashStatus::Type;
}
extern "C" {
    pub fn squash_plugin_get_name(plugin: *mut SquashPlugin) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn squash_plugin_get_licenses(plugin: *mut SquashPlugin) -> *mut SquashLicense;
}
extern "C" {
    pub fn squash_plugin_get_codec(
        plugin: *mut SquashPlugin,
        codec: *const ::std::os::raw::c_char,
    ) -> *mut SquashCodec;
}
pub type SquashPluginForeachFunc = ::std::option::Option<
    unsafe extern "C" fn(plugin: *mut SquashPlugin, data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn squash_plugin_foreach_codec(
        plugin: *mut SquashPlugin,
        func: SquashCodecForeachFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SquashMemoryFuncs {
    pub malloc:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub aligned_alloc: ::std::option::Option<
        unsafe extern "C" fn(alignment: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub aligned_free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_SquashMemoryFuncs() {
    assert_eq!(
        ::std::mem::size_of::<SquashMemoryFuncs>(),
        48usize,
        concat!("Size of: ", stringify!(SquashMemoryFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<SquashMemoryFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(SquashMemoryFuncs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).malloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).realloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).calloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(calloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).aligned_alloc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(aligned_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SquashMemoryFuncs>())).aligned_free as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SquashMemoryFuncs),
            "::",
            stringify!(aligned_free)
        )
    );
}
extern "C" {
    pub fn squash_set_memory_functions(memfn: SquashMemoryFuncs);
}
extern "C" {
    pub fn squash_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_calloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_aligned_alloc(alignment: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn squash_aligned_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_set_default_search_path(search_path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn squash_context_get_default() -> *mut SquashContext;
}
extern "C" {
    pub fn squash_context_get_plugin(
        context: *mut SquashContext,
        plugin: *const ::std::os::raw::c_char,
    ) -> *mut SquashPlugin;
}
extern "C" {
    pub fn squash_context_get_codec(
        context: *mut SquashContext,
        codec: *const ::std::os::raw::c_char,
    ) -> *mut SquashCodec;
}
extern "C" {
    pub fn squash_context_foreach_plugin(
        context: *mut SquashContext,
        func: SquashPluginForeachFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn squash_context_foreach_codec(
        context: *mut SquashContext,
        func: SquashCodecForeachFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn squash_context_get_codec_from_extension(
        context: *mut SquashContext,
        extension: *const ::std::os::raw::c_char,
    ) -> *mut SquashCodec;
}
extern "C" {
    pub fn squash_get_plugin(plugin: *const ::std::os::raw::c_char) -> *mut SquashPlugin;
}
extern "C" {
    pub fn squash_get_codec(codec: *const ::std::os::raw::c_char) -> *mut SquashCodec;
}
extern "C" {
    pub fn squash_foreach_plugin(func: SquashPluginForeachFunc, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_foreach_codec(func: SquashCodecForeachFunc, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn squash_get_codec_from_extension(
        extension: *const ::std::os::raw::c_char,
    ) -> *mut SquashCodec;
}
#[doc = " <div rustbindgen replaces=\"va_list\"></div>"]
#[doc = " <div rustbindgen opaque></div>"]
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct va_list {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_va_list() {
    assert_eq!(
        ::std::mem::size_of::<va_list>(),
        24usize,
        concat!("Size of: ", stringify!(va_list))
    );
    assert_eq!(
        ::std::mem::align_of::<va_list>(),
        8usize,
        concat!("Alignment of ", stringify!(va_list))
    );
}
